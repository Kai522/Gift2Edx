<problem>
  <multiplechoiceresponse>
    <label>關於 防臭的註解 這個 bad smell, 何者正確&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="false">程式一定要寫註解
</choice>
      <choice correct="false">程式的註解一定要採用公司的定義標準
</choice>
      <choice correct="true">避免用註解來說明寫壞的程式碼，應改善程式碼品質
</choice>
      <choice correct="false">程式註解也須定期維護，否則會臭掉
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>以下原則何者錯誤?&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="false">「相依反轉」說的是，高階的物件不該相依相依於低階，應該都相依於抽象
</choice>
      <choice correct="false">LSP 告訴我們概念上的一般化，不一定都有繼承關係
</choice>
      <choice correct="false">不重複原則，說的是資料和程式碼應該要避免重複
</choice>
      <choice correct="true">設計應該模組化，達到低內聚力，高耦合度
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>常常會一起出現的資料卻沒有抽象成一個類別型態，是何種臭味？&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="true">資料泥團 Data Clumps
</choice>
      <choice correct="false">依戀情結 Feature Envy
</choice>
      <choice correct="false">基本型別偏執 Primitive Obsession
</choice>
      <choice correct="false">狎暱關係 Inappropriate Intimacy
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>關於 Delegation 委託，何者錯誤&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="false">當有多重繼承需求時，delegation 常與 inheritance 合用
</choice>
      <choice correct="true">可以完全取代繼承，但比繼承要多寫一點程式碼
</choice>
      <choice correct="false">當 A 委託給 B，表示 A 內有一個 B 的 object reference
</choice>
      <choice correct="false">設計階段可以委託給一個抽象的類別或介面
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>Dependency Inversion Principle&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="false">高階應該相依於低階模組
</choice>
      <choice correct="false">低階應該相依於高階模組
</choice>
      <choice correct="true">兩者應該相依於抽象
</choice>
      <choice correct="false">高階低階應該是朋友關係
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>系統僅儲存生日資料，而不儲存年齡的目的是&lt;br/&gt;(The system only save the birthday, not age. We want to obey what principle?)&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="true">不重複原則 (don't repeat yourself)
</choice>
      <choice correct="false">開畢原則 (open close principle)
</choice>
      <choice correct="false">最少知識原則 (less knowledge principle)
</choice>
      <choice correct="false">防護變異原則 (protected variation)
</choice>
      <choice correct="false">模組化原則
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>一般化原則（generalization）原則&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="true">兩個有部分共通特性或行為的類別可以建立一個共同的父類別
</choice>
      <choice correct="false">具備共通特性與行為的物件可以為之設計一個類別
</choice>
      <choice correct="false">所定義的父類別必須為抽象類別
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>X 必須為 A 型態，但因為他已經繼承了 B 無法再繼承 A，因此我們讓 B 繼承 A，因此造成何種問題&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="true">介面污染
</choice>
      <choice correct="false">無法滿足 Liskov Subsitution Principle
</choice>
      <choice correct="false">無法滿足 Dependency Inversion Principle
</choice>
      <choice correct="false">控制反轉
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>關於控制反轉, 何者錯誤&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="false">英文是 Inversion of Control
</choice>
      <choice correct="false">是軟體框架的重要原則
</choice>
      <choice correct="false">又稱為好萊嗚原則
</choice>
      <choice correct="true">目的是避免介面污染
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>當參數過多時，可使用哪個方法來解決&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="false">Parameterize Method
</choice>
      <choice correct="true">Introduce Parameter Object
</choice>
      <choice correct="false">Replace Error Code with Exception
</choice>
      <choice correct="false">Pull Up Field
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>下列何者為 Shotgun Surgery 的概念?&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="false">一個類別會因為因應太多的變更原因而需修改
</choice>
      <choice correct="true">每次為因應同一種變更，你必須同時在許多類別上做出許多修改
</choice>
      <choice correct="false">常常會一起出現的資料群卻沒有抽象呈一個類別型態
</choice>
      <choice correct="false">一個計算要取好多其他類別的值。
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <multiplechoiceresponse>
    <label>關於"過多的參數"壞味道，請問底下哪一個敘述有誤？&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="false">太長的參數列難以理解
</choice>
      <choice correct="true">太長的參數列執行效率差
</choice>
      <choice correct="false">容易造成呼叫參數順序錯誤的bug
</choice>
    </choicegroup>
  </multiplechoiceresponse>
  <choiceresponse>
    <label>&lt;pre&gt;a = [1,2,3]&lt;br/&gt;b = [4,5,6]&lt;br/&gt;下述何者正確?&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;</label>
    <checkboxgroup>
      <choice correct="false">a[1]+b[1]=5
</choice>
      <choice correct="true">a[0]+b[1]=6
</choice>
      <choice correct="true">a[-1]+b[-1]=9
</choice>
      <choice correct="false">a[2]+b[3]=8
</choice>
    </checkboxgroup>
  </choiceresponse>
  <stringresponse answer="3">
    <label>印出什麼？&lt;br/&gt;&lt;pre&gt;data = [12, 23, 34, 100, 45]&lt;br/&gt;for i, g in enumerate(data):&lt;br/&gt;	if g == 100:&lt;br/&gt;		print (i)&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;</label>
    <textline size="20"/>
  </stringresponse>
  <multiplechoiceresponse>
    <label>List 內可以放不同型態的資料&lt;br/&gt;</label>
    <choicegroup type="MultipleChoice">
      <choice correct="true">True</choice>
      <choice correct="false">False</choice>
    </choicegroup>
  </multiplechoiceresponse>
</problem>
