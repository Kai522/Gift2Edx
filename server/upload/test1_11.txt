// question: 0  name: Switch category to $course$/Design principle
$CATEGORY: $course$/Design principle

// question: 1107599  name: logic op
::logic op::[html]<pre>age\=21\nname\='John'\ngrade \= [88,90,100]\n</pre>\n<p>連接以下邏輯運算的結果</p>{
	=<p>age &lt;&gt; 20</p> -> ERROR
	=<p>age &gt;\= 20</p> -> True
	=<p>age \=\= 21 and name \=\='John'</p> -> True
	=<p>(age &lt; 20) or (100 in grade)</p> -> True
	=<p>age \=\= 21 and 100 not in grade</p> -> False
	=<p>name is 'John'</p> -> True
	=<p>grade \=\= [88,90,100]</p> -> True
	=<p>grade is [88,90,100]</p> -> False
}

// question: 1299902  name: door
::door::[html]<p>Explain the design below, including the problem it encounters and its solution.</p>\n<p><img src\="@@PLUGINFILE@@/adaptor.png" width\="500" /></p>{}


// question: 1106604  name: vis- hist
::vis- hist::[html]<pre>import pandas as pd\nimport matplotlib.pyplot as plt \# for saving fig\nimport numpy as np\nfig \= plt.figure()\n\n\# Series\ngrade \= [1,32,43,54,45,34,44,56,67,21,22,33,89,100,4,34,5,4,3,45,20,6,3,4,98,76]\n\ns \= pd.Series(grade)\ns.plot.hist()\n</pre>{
	~<p><img src\="@@PLUGINFILE@@/f1.png" width\="385" height\="264" /></p>
	=<p><img src\="@@PLUGINFILE@@/hist.png" width\="380" height\="252" /></p>
	~<p><img src\="@@PLUGINFILE@@/scatter.png" width\="392" height\="266" /></p>
	~<p><img src\="@@PLUGINFILE@@/pie.png" width\="366" height\="360" /></p>
}



// question: 0  name: Switch category to $course$/Design principle/refactoring
$CATEGORY: $course$/Design principle/refactoring


// question: 1264051  name: comments
::comments::關於 防臭的註解 這個 bad smell, 何者正確{
	~程式一定要寫註解
	~程式的註解一定要採用公司的定義標準
	=避免用註解來說明寫壞的程式碼，應改善程式碼品質
	~程式註解也須定期維護，否則會臭掉
}


// question: 0  name: Switch category to $course$/Design principle
$CATEGORY: $course$/Design principle


// question: 1264053  name: coupling
::coupling::以下原則何者錯誤?{
	~「相依反轉」說的是，高階的物件不該相依相依於低階，應該都相依於抽象
	~LSP 告訴我們概念上的一般化，不一定都有繼承關係
	~不重複原則，說的是資料和程式碼應該要避免重複
	=設計應該模組化，達到低內聚力，高耦合度
}


// question: 0  name: Switch category to $course$/Design principle/refactoring
$CATEGORY: $course$/Design principle/refactoring


// question: 1264050  name: data clumps
::data clumps::常常會一起出現的資料卻沒有抽象成一個類別型態，是何種臭味？{
	=資料泥團 Data Clumps
	~依戀情結 Feature Envy
	~基本型別偏執 Primitive Obsession
	~狎暱關係 Inappropriate Intimacy
}


// question: 0  name: Switch category to $course$/Design principle
$CATEGORY: $course$/Design principle


// question: 1264056  name: delegation
::delegation::關於 Delegation 委託，何者錯誤{
	~當有多重繼承需求時，delegation 常與 inheritance 合用
	=可以完全取代繼承，但比繼承要多寫一點程式碼
	~當 A 委託給 B，表示 A 內有一個 B 的 object reference
	~設計階段可以委託給一個抽象的類別或介面
}


// question: 1264058  name: DIP
::DIP::Dependency Inversion Principle{
	~高階應該相依於低階模組
	~低階應該相依於高階模組
	=兩者應該相依於抽象
	~高階低階應該是朋友關係
}


// question: 1299901  name: dry
::dry::[html]<p>系統僅儲存生日資料，而不儲存年齡的目的是</p>\n<p>(The system only save the birthday, not age. We want to obey what principle?)</p>{
	=<p>不重複原則 (don't repeat yourself)</p>
	~<p>開畢原則 (open close principle)</p>
	~<p>最少知識原則 (less knowledge principle)</p>
	~<p>防護變異原則 (protected variation)</p>
	~<p>模組化原則</p>
}


// question: 1264055  name: generalization
::generalization::一般化原則（generalization）原則{
	=兩個有部分共通特性或行為的類別可以建立一個共同的父類別
	~具備共通特性與行為的物件可以為之設計一個類別
	~所定義的父類別必須為抽象類別
}


// question: 1264057  name: interface pollution
::interface pollution::X 必須為 A 型態，但因為他已經繼承了 B 無法再繼承 A，因此我們讓 B 繼承 A，因此造成何種問題{
	=介面污染
	~無法滿足 Liskov Subsitution Principle
	~無法滿足 Dependency Inversion Principle
	~控制反轉
}


// question: 1264054  name: IoC
::IoC::關於控制反轉, 何者錯誤{
	~英文是 Inversion of Control
	~是軟體框架的重要原則
	~又稱為好萊嗚原則
	=目的是避免介面污染
}


// question: 0  name: Switch category to $course$/Design principle/refactoring
$CATEGORY: $course$/Design principle/refactoring


// question: 1264052  name: parameter
::parameter::當參數過多時，可使用哪個方法來解決{
	~Parameterize Method
	=Introduce Parameter Object
	~Replace Error Code with Exception
	~Pull Up Field
}


// question: 1264048  name: shotgun
::shotgun::下列何者為 Shotgun Surgery 的概念?{
	~一個類別會因為因應太多的變更原因而需修改
	=每次為因應同一種變更，你必須同時在許多類別上做出許多修改
	~常常會一起出現的資料群卻沒有抽象呈一個類別型態
	~一個計算要取好多其他類別的值。
}


// question: 1106604  name: vis- hist
::vis- hist::[html]<pre>import pandas as pd\nimport matplotlib.pyplot as plt \# for saving fig\nimport numpy as np\nfig \= plt.figure()\n\n\# Series\ngrade \= [1,32,43,54,45,34,44,56,67,21,22,33,89,100,4,34,5,4,3,45,20,6,3,4,98,76]\n\ns \= pd.Series(grade)\ns.plot.hist()\n</pre>{
	~<p><img src\="@@PLUGINFILE@@/f1.png" width\="385" height\="264" /></p>
	=<p><img src\="@@PLUGINFILE@@/hist.png" width\="380" height\="252" /></p>
	~<p><img src\="@@PLUGINFILE@@/scatter.png" width\="392" height\="266" /></p>
	~<p><img src\="@@PLUGINFILE@@/pie.png" width\="366" height\="360" /></p>
}

// question: 1264049  name: 過多的參數
::過多的參數::關於"過多的參數"壞味道，請問底下哪一個敘述有誤？{
	~太長的參數列難以理解
	=太長的參數列執行效率差
	~容易造成呼叫參數順序錯誤的bug
}

// question: 1107261  name: a[-1]
::a[-1]::[html]<pre>a \= [1,2,3]\nb \= [4,5,6]\n下述何者正確?\n</pre>{
	~<p>a[1]+b[1]\=5</p>
	~%50%<p>a[0]+b[1]\=6</p>
	~%50%<p>a[-1]+b[-1]\=9</p>
	~<p>a[2]+b[3]\=8</p>
}


// question: 1106604  name: vis- hist
::vis- hist::[html]<pre>import pandas as pd\nimport matplotlib.pyplot as plt \# for saving fig\nimport numpy as np\nfig \= plt.figure()\n\n\# Series\ngrade \= [1,32,43,54,45,34,44,56,67,21,22,33,89,100,4,34,5,4,3,45,20,6,3,4,98,76]\n\ns \= pd.Series(grade)\ns.plot.hist()\n</pre>{
	~<p><img src\="@@PLUGINFILE@@/f1.png" width\="385" height\="264" /></p>
	=<p><img src\="@@PLUGINFILE@@/hist.png" width\="380" height\="252" /></p>
	~<p><img src\="@@PLUGINFILE@@/scatter.png" width\="392" height\="266" /></p>
	~<p><img src\="@@PLUGINFILE@@/pie.png" width\="366" height\="360" /></p>
}
// question: 1098843  name: enumerate
::enumerate::[html]<p>印出什麼？</p>\n<pre>data \= [12, 23, 34, 100, 45]\nfor i, g in enumerate(data)\:\n	if g \=\= 100\:\n		print (i)\n</pre>{
	=%100%3#
}
// question: 1098483  name: List- type
::List- type::[html]<p>List 內可以放不同型態的資料</p>{TRUE}